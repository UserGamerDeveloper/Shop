// <auto-generated />
using System;
using MicroElectronic.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroElectronic.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240705161828_add_null_comm")]
    partial class add_null_comm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroElectronic.Domain.Models.ApplicationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationItems", (string)null);
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/lib/images/crystal.png",
                            Name = "Кристальное производство"
                        });
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("GuaranteePeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("One")
                        .HasColumnType("int");

                    b.Property<string>("ParamNameEight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameEleven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameFive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameFour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameNine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameSeven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameSix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameTen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameTwelve")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamNameTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueEight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueEleven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueFive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueFour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueNine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueSeven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueSix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueTen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueTwelve")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValueTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Three")
                        .HasColumnType("int");

                    b.Property<int>("Two")
                        .HasColumnType("int");

                    b.Property<string>("WorkingArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Equipments", (string)null);
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateClosed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "admin",
                            Name = "Дмитрий",
                            Password = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            Position = "Developer",
                            Role = 2,
                            Surname = "Зотов"
                        });
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.ApplicationItem", b =>
                {
                    b.HasOne("MicroElectronic.Domain.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroElectronic.Domain.Models.User", "User")
                        .WithMany("ApplicationItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.Equipment", b =>
                {
                    b.HasOne("MicroElectronic.Domain.Models.Category", "Category")
                        .WithMany("Equipments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.Order", b =>
                {
                    b.HasOne("MicroElectronic.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("MicroElectronic.Domain.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.Category", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MicroElectronic.Domain.Models.User", b =>
                {
                    b.Navigation("ApplicationItems");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
